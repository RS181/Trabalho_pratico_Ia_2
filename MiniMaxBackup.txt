// 23/03/2023
// 17:57
import java.util.*;
//*TODO Mostarr a professora
public class MiniMax {
    private Node initial;
    private int MaxDepth;
    private Node bestNode;
    static Set<String> visited = new TreeSet<>();

    MiniMax(Node i, int MD) {
        initial = i;
        MaxDepth = MD;
        bestNode = MiniMax(initial, MaxDepth);
    }

    public Node getBestNode() {
        return bestNode;
    }

    // TODO testar esta funcao
    public static ArrayList<Node> Sucessores(Node n) {
        ArrayList<Node> suc = new ArrayList<>();
        Puzzle aux = n.current;
        // ? So gera sucessores se o no atual nao for
        if (!(n.current.Is_Terminal())) {
            for (int i = 0; i < 7; i++) {
                // Se a coluna atual for valida para jogar criamos sucesores
                if (aux.valid[i] != -1) {
                    // faz o movimento sem alterar o puzzle original
                    Puzzle temp = aux.Result(aux, i);

                    // criamos um novo no
                    suc.add(new Node(temp));
                }
            }
        }
        return suc;
    }

    public static Node MiniMax(Node Initial, int MaxDepth) {
        
        Node best = max_value(Initial, MaxDepth);
        return best;
    }
    // *Estamos no turno Max(computador a jogar) e queremos o maximo do turno Min

    public static Node max_value(Node cur, int MaxDepth) {
        if (cur.current.Is_Terminal() || MaxDepth == 0 || cur.current.Full()) {
            cur.Utility = cur.current.Calculate_Utility();
            return cur;
        }
        // !No que contem a maior utilidade (proximo movimento do Computador)
        Node best = null;

        int v = Integer.MIN_VALUE;
        // Sucessores do no atual
        visited.add(cur.current.toString());
        ArrayList<Node> Sucessors = Sucessores(cur);
        for (int i = 0; i < Sucessors.size(); i++) {
            Puzzle next = Sucessors.get(i).current;
            Node filho = new Node(next);

            // ?Para evitar visitar estados que ja foram visitados
            visited.add(next.toString());
            int minValue = min_value(filho, MaxDepth - 1);
            // ! se o valor atual for maior limite inferior(Integer.MIN_VALUE)
            if (minValue > v) {
                v = minValue;
                best = filho;
            }
        }
        return best;
    }

    // *Estamos no turno Min e queremos o minimo do turno Max
    public static int min_value(Node cur, int MaxDepth) {
        // ?Verifica se (o no atual e um no terminal ou a profundidade maxima foi
        // atingida ou temos o tabuleiro cheio

        if (cur.current.Is_Terminal() || MaxDepth == 0 || cur.current.Full()) {

            // ? se esse for o caso calcula a utilidade do no atual e atualiza-a e retorna
            // esse no
            cur.Utility = cur.current.Calculate_Utility();
            return cur.Utility;
        }

        int v = Integer.MAX_VALUE;
        visited.add(cur.current.toString());
        // Sucessores do no atual
        ArrayList<Node> Sucessors = Sucessores(cur);
        for (int i = 0; i < Sucessors.size(); i++) {
            Puzzle next = Sucessors.get(i).current;
            Node filho = new Node(next);
            // ?Para evitar visitar estados que ja foram visitados
            v = Math.min(v, max_value(filho, MaxDepth - 1).current.Calculate_Utility());
        }
        return v;
    }
}
